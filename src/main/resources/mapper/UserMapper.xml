<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.lsu.chicken.room.dao.UserMapper">
    <resultMap id="BaseResultMap" type="cn.lsu.chicken.room.dto.UserDTO">
        <id column="user_id" property="id" jdbcType="INTEGER"/>
        <result column="user_name" property="name" jdbcType="VARCHAR"/>
        <result column="user_phone" property="phone" jdbcType="VARCHAR"/>
        <result column="user_email" property="email" jdbcType="VARCHAR"/>
        <result column="user_password" property="password" jdbcType="VARCHAR"/>
        <result column="user_avatar" property="avatar" jdbcType="VARCHAR"/>
        <result column="user_role" property="role" jdbcType="TINYINT"/>
        <result column="user_face_url" property="faceUrl" jdbcType="TINYINT"/>
        <association property="company" javaType="cn.lsu.chicken.room.dto.CompanyDTO">
            <id column="company_id" property="id"></id>
            <result column="company_name" property="name"></result>
            <result column="company_code" property="code"></result>
            <result column="company_cost" property="cost"></result>
            <collection property="hr" ofType="cn.lsu.chicken.room.domain.User" javaType="ArrayList">
                <id column="hr_id" property="id"></id>
                <result column="hr_name" property="name"></result>
                <result column="hr_phone" property="phone"></result>
                <result column="hr_email" property="email"></result>
                <result column="hr_avatar" property="avatar"></result>
                <result column="hr_role" property="role"></result>
            </collection>
        </association>
        <association property="department" javaType="cn.lsu.chicken.room.domain.Department">
            <id column="department_id" property="id"></id>
            <result column="department_name" property="name"></result>
            <result column="department_company_id" property="companyId"></result>
        </association>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        u.id as user_id,u.name as user_name,u.phone as user_phone,u.email as user_email,u.password as
          user_password,u.avatar as user_avatar,u.role as user_role,u.face_url as user_face_url,
        c.id as company_id,c.name as company_name,c.code as company_code,c.cost as company_cost,
        uh.id as hr_id,uh.name as hr_name,uh.phone as hr_phone,uh.email as hr_email,
        uh.avatar as hr_avatar,uh.role as hr_role,
        d.id as department_id,d.name as department_name,d.company_id as department_company_id
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.lsu.chicken.room.domain.UserExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from (
        select * from user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderList != null">
            order by
            <foreach collection="orderList" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
        <if test="page != null and size!= null">
            limit #{offset},#{size}
        </if>
        ) as u
        left join company as c on c.id = u.company_id
        left join hr_re as h on h.company_id = c.id
        left join user as uh on uh.id = h.user_id
        left join department as d on u.department_id = d.id
        <if test="orderList != null">
            order by
            <foreach collection="orderList" item="item" index="index" separator=",">
                u.${item}
            </foreach>
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from (
        select * from user
        where id = #{id,jdbcType=INTEGER}
        ) as u
        left join company as c on c.id = u.company_id
        left join hr_re as h on h.company_id = c.id
        left join user as uh on uh.id = h.user_id
        left join department as d on u.department_id = d.id
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="cn.lsu.chicken.room.domain.UserExample">
        delete from user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.lsu.chicken.room.domain.User" useGeneratedKeys="true" keyProperty="id">
    insert into user (name, phone, email, 
      password, avatar, role,company_id,department_id)
    values (#{name,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{avatar,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="cn.lsu.chicken.room.domain.User" useGeneratedKeys="true"
            keyProperty="id">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="name != null">
                name,
            </if>
            <if test="phone != null">
                phone,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="avatar != null">
                avatar,
            </if>
            <if test="role != null">
                role,
            </if>
            <if test="companyId != null">
                company_id,
            </if>
            <if test="departmentId != null">
                department_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="avatar != null">
                #{avatar,jdbcType=VARCHAR},
            </if>
            <if test="role != null">
                #{role,jdbcType=TINYINT},
            </if>
            <if test="companyId != null">
                #{companyId,jdbcType=INTEGER},
            </if>
            <if test="departmentId != null">
                #{departmentId,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.lsu.chicken.room.domain.UserExample" resultType="java.lang.Integer">
        select count(id) from user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update user
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.name != null">
                name = #{record.name,jdbcType=VARCHAR},
            </if>
            <if test="record.phone != null">
                phone = #{record.phone,jdbcType=VARCHAR},
            </if>
            <if test="record.email != null">
                email = #{record.email,jdbcType=VARCHAR},
            </if>
            <if test="record.password != null">
                password = #{record.password,jdbcType=VARCHAR},
            </if>
            <if test="record.avatar != null">
                avatar = #{record.avatar,jdbcType=VARCHAR},
            </if>
            <if test="record.role != null">
                role = #{record.role,jdbcType=TINYINT},
            </if>
            <if test="record.companyId != null">
                company_id = #{record.companyId,jdbcType=INTEGER},
            </if>
            <if test="record.departmentId != null">
                department_id = #{record.departmentId,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update user
        set id = #{record.id,jdbcType=INTEGER},
        name = #{record.name,jdbcType=VARCHAR},
        phone = #{record.phone,jdbcType=VARCHAR},
        email = #{record.email,jdbcType=VARCHAR},
        password = #{record.password,jdbcType=VARCHAR},
        avatar = #{record.avatar,jdbcType=VARCHAR},
        role = #{record.role,jdbcType=TINYINT},
        company_id = #{companyId,jdbcType=INTEGER},
        department_id = #{departmentId,jdbcType=INTEGER},
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.lsu.chicken.room.domain.User">
        update user
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="avatar != null">
                avatar = #{avatar,jdbcType=VARCHAR},
            </if>
            <if test="role != null">
                role = #{role,jdbcType=TINYINT},
            </if>
            <if test="companyId != null">
                company_id = #{companyId,jdbcType=INTEGER},
            </if>
            <if test="departmentId != null">
                department_id = #{departmentId,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.lsu.chicken.room.domain.User">
    update user
    set name = #{name,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      avatar = #{avatar,jdbcType=VARCHAR},
      role = #{role,jdbcType=TINYINT},
      company_id = #{companyId,jdbcType=INTEGER},
      department_id = #{departmentId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <select id="countByApplyIdExample" resultType="java.lang.Integer">
        select count(u.id) from user
        as u left join attend_worker_re as a on u.id = a.worker_id
        where a.apply_id = #{applyId,jdbcType=INTEGER}
    </select>

    <select id="selectByApplyIdExample" resultType="cn.lsu.chicken.room.domain.User">
        select
        <if test="example.distinct">
            distinct
        </if>
        u.id as id,u.name as name,u.phone as phone,u.email as email,
        u.password as password,u.avatar as avatar,u.role as role,
        u.company_id as companyId,u.department_id as departmentId
        from (
        select * from user
        <if test="example.orderList != null">
            order by
            <foreach collection="example.orderList" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
        <if test="example.page != null and example.size!= null">
            limit #{offset},#{size}
        </if>
        ) as u left join attend_worker_re as a on u.id = a.worker_id
        where a.apply_id = #{applyId,jdbcType=INTEGER}
        <if test="example.orderList != null">
            order by
            <foreach collection="example.orderList" item="item" index="index" separator=",">
                u.${item}
            </foreach>
        </if>
    </select>

    <update id="updateFaceByList">
        <foreach collection="user" item="user" index="index" open="" close="" separator=";">
            UPDATE user
            <set>
                face=#{user.face},
                face_url = #{user.faceUrl}
            </set>
            <where>
                id = #{user.id}
            </where>
        </foreach>
    </update>

    <select id="listUserFace" resultType="cn.lsu.chicken.room.dto.UserFaceDTO">
        select id,name,phone,face from user where face is not null;
    </select>
</mapper>
