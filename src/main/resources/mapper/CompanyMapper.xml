<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.lsu.chicken.room.dao.CompanyMapper">
    <resultMap id="BaseResultMap" type="cn.lsu.chicken.room.dto.CompanyDTO">
        <id column="company_id" property="id" jdbcType="INTEGER"/>
        <result column="company_name" property="name" jdbcType="VARCHAR"/>
        <result column="company_code" property="code" jdbcType="VARCHAR"/>
        <result column="company_cost" property="cost" jdbcType="DECIMAL"/>
        <collection property="hr" ofType="cn.lsu.chicken.room.domain.User" javaType="ArrayList">
            <id column="user_id" property="id"></id>
            <result column="user_name" property="name"></result>
            <result column="user_phone" property="phone"></result>
            <result column="user_email" property="email"></result>
            <result column="user_password" property="password"></result>
            <result column="user_avatar" property="avatar"></result>
            <result column="user_role" property="role"></result>
        </collection>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    c.id as company_id,c.name as company_name,c.code as company_code,c.cost as company_cost,
    u.id as user_id,u.name as user_name,u.phone as user_phone,u.email as user_email ,
    u.password as user_password,u.avatar as user_avatar,u.role as user_role
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.lsu.chicken.room.domain.CompanyExample">
        select
        <if test="distinct">
            distinct
        </if>

        <include refid="Base_Column_List"/>

        from (
        select * from company
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderList != null">
            order by
            <foreach collection="orderList" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
        <if test="page != null and size!= null">
            limit #{offset},#{size}
        </if>
        )
        as c
        left join hr_re as h on c.id = h.company_id
        left join user as u on u.id = h.user_id
        <if test="orderList != null">
            order by
            <foreach collection="orderList" item="item" index="index" separator=",">
                c.${item}
            </foreach>
        </if>

    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from (
        select * from company
        where id = #{id,jdbcType=INTEGER}
        )
        as c
        left join hr_re as h on c.id = h.company_id
        left join user as u on u.id = h.user_id;
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from company
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="cn.lsu.chicken.room.domain.CompanyExample">
        delete from company
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.lsu.chicken.room.domain.Company" useGeneratedKeys="true" keyProperty="id">
    insert into company (name, code, cost
      )
    values (#{name,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR}, #{cost,jdbcType=DECIMAL}
      )
  </insert>
    <insert id="insertSelective" parameterType="cn.lsu.chicken.room.domain.Company" useGeneratedKeys="true"
            keyProperty="id">
        insert into company
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="name != null">
                name,
            </if>
            <if test="code != null">
                code,
            </if>
            <if test="cost != null">
                cost,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="code != null">
                #{code,jdbcType=VARCHAR},
            </if>
            <if test="cost != null">
                #{cost,jdbcType=DECIMAL},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.lsu.chicken.room.domain.CompanyExample"
            resultType="java.lang.Integer">
        select count(id) from company
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update company
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.name != null">
                name = #{record.name,jdbcType=VARCHAR},
            </if>
            <if test="record.code != null">
                code = #{record.code,jdbcType=VARCHAR},
            </if>
            <if test="record.cost != null">
                cost = #{record.cost,jdbcType=DECIMAL},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update company
        set id = #{record.id,jdbcType=INTEGER},
        name = #{record.name,jdbcType=VARCHAR},
        code = #{record.code,jdbcType=VARCHAR},
        cost = #{record.cost,jdbcType=DECIMAL}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.lsu.chicken.room.domain.Company">
        update company
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="code != null">
                code = #{code,jdbcType=VARCHAR},
            </if>
            <if test="cost != null">
                cost = #{cost,jdbcType=DECIMAL},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.lsu.chicken.room.domain.Company">
    update company
    set name = #{name,jdbcType=VARCHAR},
      code = #{code,jdbcType=VARCHAR},
      cost = #{cost,jdbcType=DECIMAL}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <update id="updateCompanyHr">
        <choose>
            <when test="list.size() != 0">
                delete from hr_re where company_id = #{companyId} and user_id not in(
                <foreach collection="list" item="item" index="index" separator=",">
                    #{item,jdbcType=INTEGER}
                </foreach>
                );

                replace into hr_re(user_id,company_id) values
                <foreach collection="list" item="item" index="index" separator=",">
                    (#{item,jdbcType=INTEGER},#{companyId,jdbcType=INTEGER})
                </foreach>
            </when>
            <when test="list.size() == 0">
                delete from hr_re where company_id = #{companyId}
            </when>
        </choose>
    </update>

    <update id="increaseCostByPrimaryKey">
        update company set cost = cost + #{cost,jdbcType=DECIMAL}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="clearCostByPrimaryKey">
        update company set cost = 0
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>
