<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.lsu.chicken.room.dao.MeetingRoomMapper">
    <resultMap id="BaseResultMap" type="cn.lsu.chicken.room.dto.MeetingRoomDTO">
        <id column="room_id" property="id" jdbcType="INTEGER"/>
        <result column="room_name" property="name" jdbcType="VARCHAR"/>
        <result column="room_address" property="address" jdbcType="VARCHAR"/>
        <result column="room_volume" property="volume" jdbcType="TINYINT"/>
        <result column="room_using" property="isUsing" jdbcType="TINYINT"/>
        <result column="room_cover" property="cover" jdbcType="VARCHAR"/>
        <result column="room_price" property="price" jdbcType="DECIMAL"/>
        <result column="room_hot" property="hot" jdbcType="INTEGER"/>
        <association property="building" javaType="cn.lsu.chicken.room.domain.Building">
            <id column="building_id" property="id"></id>
            <result column="building_location" property="location"></result>
        </association>
        <collection property="tag" ofType="cn.lsu.chicken.room.domain.Tag" javaType="ArrayList">
            <id column="tag_id" property="id"></id>
            <result column="tag_name" property="name"></result>
        </collection>
        <collection property="equipment" ofType="cn.lsu.chicken.room.domain.Equipment" javaType="ArrayList">
            <id column="equipment_id" property="id"></id>
            <result column="equipment_name" property="name"></result>
        </collection>
        <collection property="autoList" ofType="java.lang.String" javaType="ArrayList">
            <constructor>
                <arg column="file_url"/>
            </constructor>
        </collection>
    </resultMap>
    <resultMap id="ResultMapWithBLOBs" type="cn.lsu.chicken.room.dto.MeetingRoomDTO" extends="BaseResultMap">
        <result column="room_detail" property="detail" jdbcType="LONGVARCHAR"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    r.id as room_id,r.name as room_name ,b.id as building_id,b.location as building_location,r.address as
        room_address,r.volume as room_volume ,r.cover as room_cover,r.is_using as room_using,
        r.price as room_price,r.detail as room_detail,r.hot as room_hot,
        g.id as tag_id,g.name as tag_name,
        eq.id as equipment_id , eq.name as equipment_name,
        f.url as file_url
  </sql>
    <sql id="Blob_Column_List">
    detail
  </sql>
    <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs"
            parameterType="cn.lsu.chicken.room.domain.MeetingRoomExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from
        (
        select * from meeting_room
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderList != null">
            order by
            <foreach collection="orderList" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
        <if test="page != null and size!= null">
            limit #{offset},#{size}
        </if>
        )
        as r
        left join building as b on b.id = r.building_id
        left join tag_re as t on t.meeting_room_id = r.id
        left join tag as g on g.id = t.tag_id
        left join equipment_re as e on e.meeting_room_id = r.id
        left join equipment as eq on eq.id = e.equipment_id
        left join file as f on f.meeting_room_id = r.id
          and f.meeting_apply_id is null
        <if test="orderList != null">
            order by
            <foreach collection="orderList" item="item" index="index" separator=",">
                r.${item}
            </foreach>
        </if>
    </select>
    <select id="selectByExample" resultMap="ResultMapWithBLOBs"
            parameterType="cn.lsu.chicken.room.domain.MeetingRoomExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from
        (
        select * from meeting_room
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderList != null">
            order by
            <foreach collection="orderList" item="item" index="index" separator=",">
                ${item}
            </foreach>
        </if>
        <if test="page != null and size!= null">
            limit #{offset},#{size}
        </if>
        )
        as r
        left join building as b on b.id = r.building_id
        left join tag_re as t on t.meeting_room_id = r.id
        left join tag as g on g.id = t.tag_id
        left join equipment_re as e on e.meeting_room_id = r.id
        left join equipment as eq on eq.id = e.equipment_id
        left join file as f on f.meeting_room_id = r.id
          and f.meeting_apply_id is null
        <if test="orderList != null">
            order by
            <foreach collection="orderList" item="item" index="index" separator=",">
                r.${item}
            </foreach>
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">

        select
        <include refid="Base_Column_List"/>
        from
        (
        select * from meeting_room
        where id = #{id,jdbcType=INTEGER}
        )
        as r
        left join building as b on b.id = r.building_id
        left join tag_re as t on t.meeting_room_id = r.id
        left join tag as g on g.id = t.tag_id
        left join equipment_re as e on e.meeting_room_id = r.id
        left join equipment as eq on eq.id = e.equipment_id
        left join file as f on f.meeting_room_id = #{id,jdbcType=INTEGER}
          and f.meeting_apply_id is null
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from meeting_room
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="cn.lsu.chicken.room.domain.MeetingRoomExample">
        delete from meeting_room
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.lsu.chicken.room.domain.MeetingRoom" useGeneratedKeys="true" keyProperty="id">
    insert into meeting_room (name, building_id, address, 
      volume, is_using, price, 
      detail)
    values (#{name,jdbcType=VARCHAR}, #{buildingId,jdbcType=INTEGER}, #{address,jdbcType=VARCHAR}, 
      #{volume,jdbcType=TINYINT}, #{isUsing,jdbcType=TINYINT}, #{price,jdbcType=DECIMAL}, 
      #{detail,jdbcType=LONGVARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="cn.lsu.chicken.room.domain.MeetingRoom" useGeneratedKeys="true"
            keyProperty="id">
        insert into meeting_room
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="name != null">
                name,
            </if>
            <if test="buildingId != null">
                building_id,
            </if>
            <if test="address != null">
                address,
            </if>
            <if test="volume != null">
                volume,
            </if>
            <if test="cover != null">
                cover,
            </if>
            <if test="isUsing != null">
                is_using,
            </if>
            <if test="price != null">
                price,
            </if>
            <if test="detail != null">
                detail,
            </if>
            <if test="hot != null">
                hot,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="buildingId != null">
                #{buildingId,jdbcType=INTEGER},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="volume != null">
                #{volume,jdbcType=TINYINT},
            </if>
            <if test="cover != null">
                #{cover,jdbcType=VARCHAR},
            </if>
            <if test="isUsing != null">
                #{isUsing,jdbcType=TINYINT},
            </if>
            <if test="price != null">
                #{price,jdbcType=DECIMAL},
            </if>
            <if test="detail != null">
                #{detail,jdbcType=LONGVARCHAR},
            </if>
            <if test="hot != null">
                #{hot,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.lsu.chicken.room.domain.MeetingRoomExample"
            resultType="java.lang.Integer">
        select count(id) from meeting_room
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update meeting_room
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.name != null">
                name = #{record.name,jdbcType=VARCHAR},
            </if>
            <if test="record.buildingId != null">
                building_id = #{record.buildingId,jdbcType=INTEGER},
            </if>
            <if test="record.address != null">
                address = #{record.address,jdbcType=VARCHAR},
            </if>
            <if test="record.volume != null">
                volume = #{record.volume,jdbcType=TINYINT},
            </if>
            <if test="record.cover != null">
                cover = #{record.cover,jdbcType=VARCHAR},
            </if>
            <if test="record.isUsing != null">
                is_using = #{record.isUsing,jdbcType=TINYINT},
            </if>
            <if test="record.price != null">
                price = #{record.price,jdbcType=DECIMAL},
            </if>
            <if test="record.detail != null">
                detail = #{record.detail,jdbcType=LONGVARCHAR},
            </if>
            <if test="record.hot != null">
                detail = #{record.hot,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update meeting_room
        set id = #{record.id,jdbcType=INTEGER},
        name = #{record.name,jdbcType=VARCHAR},
        building_id = #{record.buildingId,jdbcType=INTEGER},
        address = #{record.address,jdbcType=VARCHAR},
        volume = #{record.volume,jdbcType=TINYINT},
        cover = #{record.cover,jdbcType=VARCHAR},
        is_using = #{record.isUsing,jdbcType=TINYINT},
        price = #{record.price,jdbcType=DECIMAL},
        detail = #{record.detail,jdbcType=LONGVARCHAR},
        hot = #{record.hot,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update meeting_room
        set id = #{record.id,jdbcType=INTEGER},
        name = #{record.name,jdbcType=VARCHAR},
        building_id = #{record.buildingId,jdbcType=INTEGER},
        address = #{record.address,jdbcType=VARCHAR},
        volume = #{record.volume,jdbcType=TINYINT},
        cover = #{record.cover,jdbcType=VARCHAR},
        is_using = #{record.isUsing,jdbcType=TINYINT},
        price = #{record.price,jdbcType=DECIMAL},
        hot = #{record.hot,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.lsu.chicken.room.domain.MeetingRoom">
        update meeting_room
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="buildingId != null">
                building_id = #{buildingId,jdbcType=INTEGER},
            </if>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="volume != null">
                volume = #{volume,jdbcType=TINYINT},
            </if>
            <if test="cover != null">
                cover = #{cover,jdbcType=VARCHAR},
            </if>
            <if test="isUsing != null">
                is_using = #{isUsing,jdbcType=TINYINT},
            </if>
            <if test="price != null">
                price = #{price,jdbcType=DECIMAL},
            </if>
            <if test="detail != null">
                detail = #{detail,jdbcType=LONGVARCHAR},
            </if>
            <if test="hot != null">
                hot = #{hot,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.lsu.chicken.room.domain.MeetingRoom">
    update meeting_room
    set name = #{name,jdbcType=VARCHAR},
      building_id = #{buildingId,jdbcType=INTEGER},
      address = #{address,jdbcType=VARCHAR},
      volume = #{volume,jdbcType=TINYINT},
      cover = #{cover,jdbcType=VARCHAR},
      is_using = #{isUsing,jdbcType=TINYINT},
      price = #{price,jdbcType=DECIMAL},
      detail = #{detail,jdbcType=LONGVARCHAR},
      hot = #{hot,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <update id="updateByPrimaryKey" parameterType="cn.lsu.chicken.room.domain.MeetingRoom">
    update meeting_room
    set name = #{name,jdbcType=VARCHAR},
      building_id = #{buildingId,jdbcType=INTEGER},
      address = #{address,jdbcType=VARCHAR},
      volume = #{volume,jdbcType=TINYINT},
      cover = #{cover,jdbcType=VARCHAR},
      is_using = #{isUsing,jdbcType=TINYINT},
      price = #{price,jdbcType=DECIMAL},
      hot = #{hot,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <update id="updateTagByMeetingRoomId">
        <choose>
            <when test="list.size() != 0">
                delete from tag_re where meeting_room_id = #{meetingRoomId} and tag_id not in(
                <foreach collection="list" item="item" index="index" separator=",">
                    #{item,jdbcType=INTEGER}
                </foreach>
                );

                replace into tag_re(tag_id,meeting_room_id) values
                <foreach collection="list" item="item" index="index" separator=",">
                    (#{item,jdbcType=INTEGER},#{meetingRoomId,jdbcType=INTEGER})
                </foreach>
            </when>
            <when test="list.size() == 0">
                delete from tag_re where meeting_room_id = #{meetingRoomId}
            </when>
        </choose>
    </update>


    <update id="updateEquipmentByMeetingRoomId">
        <choose>
            <when test="list.size() != 0">
                delete from equipment_re where meeting_room_id = #{meetingRoomId} and equipment_id not in(
                <foreach collection="list" item="item" index="index" separator=",">
                    #{item,jdbcType=INTEGER}
                </foreach>
                );

                replace into equipment_re(equipment_id,meeting_room_id) values
                <foreach collection="list" item="item" index="index" separator=",">
                    (#{item,jdbcType=INTEGER},#{meetingRoomId,jdbcType=INTEGER})
                </foreach>
            </when>
            <when test="list.size() == 0">
                delete from equipment_re where meeting_room_id = #{meetingRoomId}
            </when>
        </choose>
    </update>
</mapper>
